# ------------------------------------------------------------------
# Licence MIT
#
# Copyright (c) 2025 Ryan DECIAN
#
# Permission est accord√©e, gratuitement, √† toute personne obtenant
# une copie de ce logiciel et des fichiers de documentation associ√©s
# (le "Logiciel"), de commercialiser le Logiciel sans restriction,
# y compris, sans limitation, les droits d'utiliser, copier, modifier,
# fusionner, publier, distribuer, sous-licencier et/ou vendre
# des copies du Logiciel, et de permettre aux personnes √† qui le
# Logiciel est fourni de le faire, sous r√©serve des conditions
# suivantes :
#
# La mention de copyright ci-dessus et la pr√©sente autorisation
# doivent √™tre incluses dans toutes les copies ou parties substantielles
# du Logiciel.
#
# LE LOGICIEL EST FOURNI "EN L'√âTAT", SANS GARANTIE D'AUCUNE SORTE,
# EXPRESSE OU IMPLICITE, Y COMPRIS MAIS SANS S'Y LIMITER LES GARANTIES
# DE QUALIT√â MARCHANDE, D'AD√âQUATION √Ä UN USAGE PARTICULIER ET D'ABSENCE
# DE CONTREFA√áON. EN AUCUN CAS, LES AUTEURS OU TITULAIRES DU COPYRIGHT
# NE PEUVENT √äTRE TENUS POUR RESPONSABLES DE TOUTE R√âCLAMATION, DOMMAGE
# OU AUTRE RESPONSABILIT√â, QUE CE SOIT DANS LE CADRE D'UNE ACTION EN
# RESPONSABILIT√â CONTRACTUELLE, D√âLICTUELLE OU AUTRE, D√âCOULANT DE,
# HORS OU EN RELATION AVEC LE LOGICIEL OU L'UTILISATION OU D'AUTRES
# TRAITEMENTS DU LOGICIEL.
# ------------------------------------------------------------------


# Cette commande permet de mettre a jour toutes les branches
# d'un projet et de supprimer les branches obsol√®tes qui ont
# √©t√© supprim√©es de GitHub


# Cette version n'est compatible que sur Windows et Visual Studio Code


# Configuration pour rendre ce script ex√©cutable : 
# Il faut ouvrir le logiciel Visual Code Studio en administrateur puis
# Copier coller les commandes entre les pointill√©s dans votre terminal bash : 

: <<EOF
---------------------------------------------------------------------------------------------

# Enregistrer le chemin actuel
initial_path=$(pwd)

# Chemin cible pour le dossier Script
target_path="/c/Program Files/Git/usr/bin/Script"

# Chemin du fichier √† d√©placer (depuis la racine du projet React)
file_to_move="./git-commit-biome"

# V√©rifier si le dossier existe
if [ ! -d "$target_path" ]; then
    echo "üìÇ Le dossier 'Script' n'existe pas. Cr√©ation en cours..."
    mkdir -p "$target_path"
    echo "‚úÖ Dossier 'Script' cr√©√© avec succ√®s."
else
    echo "‚úîÔ∏è Le dossier 'Script' existe d√©j√†."
fi

# V√©rifier si le fichier git-commit-biome existe √† la racine du projet
if [ -f "$file_to_move" ]; then
    echo "üìÑ Le fichier 'git-commit-biome' existe. D√©placement en cours..."
    mv "$file_to_move" "$target_path"
    echo "‚úÖ Fichier 'git-commit-biome' d√©plac√© vers : $target_path"
else
    echo "‚ùå Le fichier 'git-commit-biome' n'a pas √©t√© trouv√© √† la racine du projet."
    exit 1
fi

# Se d√©placer dans le dossier cible
cd "$target_path" || { echo "‚ùå √âchec lors de la navigation vers $target_path"; exit 1; }
echo "üìÇ Vous √™tes maintenant dans : $(pwd)"

# Rendre le fichier git-commit-biome ex√©cutable
chmod +x git-commit-biome
echo "‚úÖ Le fichier 'git-commit-biome' est maintenant ex√©cutable."

# V√©rifier et ajouter la ligne PATH dans ~/.bashrc si elle n'existe pas
bashrc_file="$HOME/.bashrc"
path_line='export PATH=$PATH:/usr/bin/Script'

if ! grep -Fxq "$path_line" "$bashrc_file"; then
    echo "üîß La ligne PATH n'existe pas dans ~/.bashrc. Ajout en cours..."
    echo "$path_line" >> "$bashrc_file"
    echo "‚úÖ Ligne ajout√©e √† ~/.bashrc : $path_line"
else
    echo "‚úîÔ∏è La ligne PATH existe d√©j√† dans ~/.bashrc."
fi

# Charger le fichier .bashrc pour appliquer les changements imm√©diatement
source "$bashrc_file"
echo "üîÑ Fichier ~/.bashrc recharg√© pour appliquer les changements."

# Retourner au chemin initial
cd "$initial_path" || { echo "‚ùå √âchec lors de la navigation vers $initial_path"; exit 1; }
echo "üìÇ Retour au chemin initial : $(pwd)"

echo "üöÄ Script termin√© avec succ√®s."


---------------------------------------------------------------------------------------------
EOF

# Pour lancer cette commande : 
# git-commit-biome


#!/bin/bash

# Version du script
echo -e "\033[1;35mVersion du script V7.1.2\033[0m"
echo ""
echo ""
echo -e "\033[35mD√©but d'ex√©cution du script\033[0m"
echo ""

# √âtape 1 : Pi√®ge pour nettoyer le fichier temporaire en cas de sortie du script
trap "rm -f .gitmessage.txt" EXIT

# √âtape 2 : Retrait des fichiers en zone de staging
echo -e "\033[36müóëÔ∏è. Retrait des fichiers en zone de staging\033[0m"
git reset
echo ""

# √âtape 3 : V√©rification agent SSH
# Emplacement du fichier pour stocker les informations de l'agent
echo -e "\033[36müîç V√©rification si un agent SSH est actif\033[0m"
echo ""
SSH_ENV="$HOME/.ssh-agent.env"

# Fonction pour d√©marrer un nouvel agent SSH
start_agent() {
    echo ""
    echo "üîë D√©marrage d'un nouvel agent SSH..."
    echo ""
    eval "$(ssh-agent -s)" > "$SSH_ENV"
    echo "export SSH_AUTH_SOCK=$SSH_AUTH_SOCK" >> "$SSH_ENV"
    echo "export SSH_AGENT_PID=$SSH_AGENT_PID" >> "$SSH_ENV"
    ssh-add ~/.ssh/id_ed25519 > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        echo "üîê Cl√© SSH ajout√©e avec succ√®s : ~/.ssh/id_ed25519"
    else
        echo "‚ùå √âchec lors de l'ajout de la cl√© SSH : ~/.ssh/id_ed25519"
    fi
}

# Recharger ou d√©marrer l'agent SSH
echo -e "\033[36müîÑ Recharger ou d√©marrer l'agent SSH\033[0m"
echo ""
if [ -f "$SSH_ENV" ]; then
    source "$SSH_ENV" > /dev/null
    if ! ps -p $SSH_AGENT_PID > /dev/null 2>&1; then
        start_agent
    fi
else
    start_agent
fi
echo -e "\033[34m‚úÖ Traitement agent SSH termin√©\033[0m"
echo ""

# √âtape 4 : V√©rification avec Biome pour corriger les fichiers
echo ""
echo -e "\033[36müöÄ Ex√©cution de Biome...\033[0m"
echo ""
echo -e "\033[36müõ†Ô∏è. Modification des fichiers n√©cessaires\033[0m"
npx @biomejs/biome check --fix --unsafe ./client
echo -e "\033[34m‚úÖ Ex√©cution de Biome termin√©e\033[0m"
echo ""

# √âtape 5 : Affiche l'√©tat actuel du d√©p√¥t
echo -e "\033[36müìÑ V√©rification de l'√©tat actuel du d√©p√¥t...\033[0m"
git status
echo ""

# √âtape 6 : Demande le message de commit
read -p $'\033[1;33mEntrez votre message de commit : \033[0m' msg
echo ""

# √âtape 7 : R√©cup√®re les fichiers modifi√©s, nouveaux et supprim√©s
files=$(git ls-files --modified --deleted --others --exclude-standard)

# √âtape 8 : V√©rifie s'il y a des fichiers √† ajouter
if [ -z "$files" ]; then
    echo -e "\033[1;31m‚ùå Aucun fichier modifi√©, supprim√© ou nouveau fichier √† ajouter.\033[0m"
    echo -e "\033[1;35mCommit annul√©.\033[0m"
    exit 1
fi

# √âtape 9 : Ajoute les fichiers modifi√©s, nouveaux et supprim√©s
echo -e "\033[36müìÑ Ajout des fichiers au staging...\033[0m"
git add -A
echo ""

# √âtape 10 : Cr√©e un fichier temporaire pour le message de commit
echo "$msg" > .gitmessage.txt

# √âtape 11 : Effectue le commit
echo -e "\033[36müìù Cr√©ation du commit...\033[0m"
HUSKY=0 git commit -F .gitmessage.txt
echo ""

# √âtape 12 : R√©cup√®re le nom de la branche actuelle
echo -e "\033[36müåø R√©cup√©ration du nom de la branche actuelle\033[0m"
branch=$(git rev-parse --abbrev-ref HEAD)
echo ""

# √âtape 13 : Pousse sur la branche courante
echo -e "\033[36müöÄ Pousse sur la branche '$branch'...\033[0m"
git push origin "$branch" || { echo "‚ùå Erreur : Push √©chou√©."; exit 1; }
echo ""

# √âtape 14 : R√©sum√© du commit
echo ""
echo -e "\033[1;35mFin du script\033[0m"
echo -e "\033[34m‚úÖ Commit r√©ussi, envoi sur la branche \033[1;35m'$branch'\033[34m avec le message :\033[0m"
echo -e "\033[33m\"$msg\"\033[0m"
